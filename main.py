# -*- coding: utf-8 -*-
import os
import random
from datetime import datetime
from flask import Request
from twilio.twiml.messaging_response import MessagingResponse
from google.cloud import firestore
from intent_processor import intent_processor

# --- CONFIGURACI√ìN INICIAL ---
PROJECT_ID = os.environ.get('PROJECT_ID')
DB = firestore.Client()

# --- MANEJADORES DE INTENCIONES ---

def handle_registrar_gasto(entities, from_number, original_message=""):
    """Maneja la l√≥gica para registrar un gasto y calcular el total de la categor√≠a."""
    # DEBUGGING: Imprimir par√°metros recibidos
    print(f"=== DEBUG REGISTRAR GASTO ===")
    print(f"Entidades extra√≠das: {entities}")
    print(f"Mensaje original: {original_message}")
    print("=============================")
    
    # Obtener par√°metros de las entidades extra√≠das
    monto = entities.get('monto', 0)
    categoria = entities.get('categoria', 'Otros Gastos')
    
    print(f"Monto procesado: {monto} (tipo: {type(monto)})")
    print(f"Categor√≠a procesada: {categoria} (tipo: {type(categoria)})")

    if monto > 0:
        # Guardar el nuevo gasto en Firestore
        doc_ref = DB.collection('gastos').document()
        doc_ref.set({
            'usuario_whatsapp': from_number,
            'monto': monto,
            'categoria': categoria,
            'fecha_registro': firestore.SERVER_TIMESTAMP
        })
        
        # Consultar el total de la categor√≠a para el mes actual
        # Filtrar por mes actual para mejor precisi√≥n
        now = datetime.now()
        start_of_month = datetime(now.year, now.month, 1)
        
        gastos_ref = DB.collection('gastos')
        query = (gastos_ref
                .where('usuario_whatsapp', '==', from_number)
                .where('categoria', '==', categoria)
                .where('fecha_registro', '>=', start_of_month))
        
        total_categoria = 0
        for gasto in query.stream():
            total_categoria += gasto.to_dict().get('monto', 0)
            
        return f"Hecho. Tu gasto de ${monto:,} en {categoria} ha sido guardado. Con este, ya sumas ${total_categoria:,} en esta categor√≠a durante el mes."
    else:
        return f"No pude entender el monto del gasto. Int√©ntalo de nuevo con un n√∫mero v√°lido, por ejemplo: 'Gast√© $50,000 en comida'."


def handle_registrar_ingreso(entities, from_number, original_message=""):
    """Maneja la l√≥gica para registrar un ingreso."""
    # DEBUGGING: Imprimir par√°metros recibidos
    print(f"=== DEBUG REGISTRAR INGRESO ===")
    print(f"Entidades extra√≠das: {entities}")
    print(f"Mensaje original: {original_message}")
    print("===============================")
    
    # Obtener par√°metros de las entidades extra√≠das
    monto = entities.get('monto', 0)
    tipo = entities.get('tipo', 'Otros Ingresos')
    
    print(f"Monto procesado: {monto} (tipo: {type(monto)})")
    print(f"Tipo procesado: {tipo} (tipo: {type(tipo)})")
    
    if monto > 0:
        # Guardar el nuevo ingreso en una colecci√≥n 'ingresos'
        doc_ref = DB.collection('ingresos').document()
        doc_ref.set({
            'usuario_whatsapp': from_number,
            'monto': monto,
            'tipo': tipo,
            'fecha_registro': firestore.SERVER_TIMESTAMP
        })
        return f"¬°Esoooo! Registr√© un ingreso de ${monto:,} como {tipo}. ¬°Felicitaciones por esa entrada de plata!"
    else:
        return f"No pude entender el monto del ingreso. Int√©ntalo de nuevo con un n√∫mero v√°lido, por ejemplo: 'Recib√≠ $500,000 de salario'."


def handle_crear_recordatorio(entities, from_number, original_message=""):
    """Maneja la l√≥gica para guardar un recordatorio de una sola vez."""
    # DEBUGGING: Imprimir par√°metros recibidos
    print(f"=== DEBUG CREAR RECORDATORIO ===")
    print(f"Entidades extra√≠das: {entities}")
    print(f"Mensaje original: {original_message}")
    print("=================================")
    
    motivo = entities.get('motivo', 'pago pendiente')
    fecha_str = entities.get('fecha', '')

    if not fecha_str:
        return "No pude entender la fecha para el recordatorio. Por favor, int√©ntalo de nuevo con una fecha espec√≠fica."

    # Guardar el recordatorio en una colecci√≥n 'recordatorios'
    doc_ref = DB.collection('recordatorios').document()
    doc_ref.set({
        'usuario_whatsapp': from_number,
        'motivo': motivo,
        'fecha_recordatorio': fecha_str,
        'fecha_creacion': firestore.SERVER_TIMESTAMP,
        'recordatorio_enviado': False # A√±adimos un campo para saber si ya se envi√≥
    })
    
    # Construir la respuesta final
    try:
        # Intentamos convertir la fecha a un formato m√°s amigable
        fecha_obj = datetime.fromisoformat(fecha_str)
        fecha_legible = fecha_obj.strftime("%d de %B a las %I:%M %p")
    except ValueError:
        # Si hay un error, usamos la fecha tal como viene
        fecha_legible = fecha_str

    return f"¬°Hecho! Te recordar√© sobre '{motivo}' el {fecha_legible}."


def handle_solicitar_resumen(entities, from_number, original_message=""):
    """Maneja la l√≥gica para crear y mostrar un resumen de gastos."""
    # Filtrar por mes actual para mejor precisi√≥n
    now = datetime.now()
    start_of_month = datetime(now.year, now.month, 1)
    
    gastos_ref = DB.collection('gastos')
    query = (gastos_ref
            .where('usuario_whatsapp', '==', from_number)
            .where('fecha_registro', '>=', start_of_month))
    
    resumen = {}
    total_general = 0
    
    for gasto in query.stream():
        gasto_data = gasto.to_dict()
        categoria = gasto_data.get('categoria', 'Otros Gastos')
        monto = gasto_data.get('monto', 0)
        
        resumen[categoria] = resumen.get(categoria, 0) + monto
        total_general += monto
    
    if not resumen:
        return "A√∫n no tienes gastos registrados este mes para mostrarte un resumen."
    
    # Ordenar categor√≠as por monto (de mayor a menor)
    resumen_ordenado = sorted(resumen.items(), key=lambda x: x[1], reverse=True)
    
    respuesta = f"üìä *Resumen de gastos - {now.strftime('%B %Y')}*\n\n"
    for categoria, total in resumen_ordenado:
        porcentaje = (total / total_general * 100) if total_general > 0 else 0
        respuesta += f"‚Ä¢ {categoria}: ${total:,} ({porcentaje:.1f}%)\n"
    respuesta += f"\nüí∞ *Total Gastado:* ${total_general:,}"
    
    return respuesta


def analyze_user_financial_patterns(from_number):
    """Analiza los patrones financieros del usuario para generar insights personalizados."""
    now = datetime.now()
    start_of_month = datetime(now.year, now.month, 1)
    
    # Obtener datos del mes actual
    gastos_ref = DB.collection('gastos')
    gastos_query = (gastos_ref
                   .where('usuario_whatsapp', '==', from_number)
                   .where('fecha_registro', '>=', start_of_month))
    
    ingresos_ref = DB.collection('ingresos')
    ingresos_query = (ingresos_ref
                     .where('usuario_whatsapp', '==', from_number)
                     .where('fecha_registro', '>=', start_of_month))
    
    # Analizar gastos
    gastos_por_categoria = {}
    total_gastos = 0
    for gasto in gastos_query.stream():
        data = gasto.to_dict()
        categoria = data.get('categoria', 'Otros')
        monto = data.get('monto', 0)
        gastos_por_categoria[categoria] = gastos_por_categoria.get(categoria, 0) + monto
        total_gastos += monto
    
    # Analizar ingresos
    total_ingresos = 0
    for ingreso in ingresos_query.stream():
        total_ingresos += ingreso.to_dict().get('monto', 0)
    
    # Calcular balance
    balance = total_ingresos - total_gastos
    
    return {
        'total_gastos': total_gastos,
        'total_ingresos': total_ingresos,
        'balance': balance,
        'gastos_por_categoria': gastos_por_categoria,
        'categoria_mayor_gasto': max(gastos_por_categoria.items(), key=lambda x: x[1])[0] if gastos_por_categoria else None,
        'num_categorias': len(gastos_por_categoria)
    }


def generate_personalized_tips(analysis, from_number):
    """Genera tips personalizados basados en el an√°lisis de los datos del usuario."""
    tips_personalizados = []
    
    # Tip basado en balance
    if analysis['balance'] < 0:
        deficit = abs(analysis['balance'])
        tips_personalizados.append(
            f"‚ö†Ô∏è *Atenci√≥n:* Est√°s gastando ${deficit:,} m√°s de lo que ingresas este mes. "
            f"Considera revisar tus gastos en {analysis['categoria_mayor_gasto']} que es tu categor√≠a m√°s alta."
        )
    elif analysis['balance'] > 0:
        tips_personalizados.append(
            f"üéâ *¬°Excelente!* Tienes ${analysis['balance']:,} de super√°vit este mes. "
            f"Considera invertir o ahorrar una parte de este dinero."
        )
    
    # Tip basado en categor√≠a de mayor gasto
    if analysis['categoria_mayor_gasto']:
        mayor_gasto = analysis['gastos_por_categoria'][analysis['categoria_mayor_gasto']]
        porcentaje = (mayor_gasto / analysis['total_gastos'] * 100) if analysis['total_gastos'] > 0 else 0
        
        if porcentaje > 40:
            tips_personalizados.append(
                f"üéØ *Enfoque:* {analysis['categoria_mayor_gasto']} representa el {porcentaje:.1f}% de tus gastos. "
                f"¬øHay formas de optimizar esta categor√≠a?"
            )
        
        # Tips espec√≠ficos por categor√≠a
        categoria = analysis['categoria_mayor_gasto'].lower()
        if 'comida' in categoria or 'aliment' in categoria:
            tips_personalizados.append(
                "üçΩÔ∏è *Comida:* Cocina m√°s en casa, planifica tus comidas y haz lista de compras. "
                "¬°Puedes ahorrar hasta 30% en alimentaci√≥n!"
            )
        elif 'transporte' in categoria or 'gasolina' in categoria:
            tips_personalizados.append(
                "üöó *Transporte:* Considera transporte p√∫blico, carpooling o bicicleta. "
                "¬°Cada viaje en carro cuesta m√°s de lo que piensas!"
            )
        elif 'entretenimiento' in categoria or 'diversi√≥n' in categoria:
            tips_personalizados.append(
                "üé™ *Entretenimiento:* Busca actividades gratuitas en tu ciudad. "
                "¬°Hay muchos eventos y lugares que no cuestan nada!"
            )
        elif 'ropa' in categoria or 'vestimenta' in categoria:
            tips_personalizados.append(
                "üëï *Ropa:* Compra en temporada de rebajas, considera tiendas de segunda mano "
                "o intercambia ropa con amigos."
            )
    
    # Tip basado en diversificaci√≥n de gastos
    if analysis['num_categorias'] < 3:
        tips_personalizados.append(
            "üìä *Organizaci√≥n:* Tienes pocas categor√≠as de gastos. Considera categorizar mejor tus gastos "
            "para tener un control m√°s detallado de tu dinero."
        )
    elif analysis['num_categorias'] > 8:
        tips_personalizados.append(
            "üîç *Simplificaci√≥n:* Tienes muchas categor√≠as. Considera agrupar algunas similares "
            "para tener una vista m√°s clara de tus gastos."
        )
    
    # Tip basado en frecuencia de uso
    if analysis['total_gastos'] == 0:
        tips_personalizados.append(
            "üìù *Empezar:* ¬°Genial que est√©s aqu√≠! Comienza registrando tus gastos diarios "
            "para tener un mejor control de tu dinero."
        )
    
    # Tip basado en el d√≠a del mes (para recordatorios)
    now = datetime.now()
    if now.day > 25:
        tips_personalizados.append(
            "üìÖ *Fin de mes:* Estamos cerca del final del mes. Revisa tu presupuesto "
            "y ajusta tus gastos si es necesario."
        )
    elif now.day < 5:
        tips_personalizados.append(
            "üéØ *Inicio de mes:* ¬°Perfecto momento para planificar! Define tus metas financieras "
            "y presupuesto para este mes."
        )
    
    # Tip basado en el monto total de gastos
    if analysis['total_gastos'] > 0:
        if analysis['total_gastos'] > 2000000:  # M√°s de 2 millones
            tips_personalizados.append(
                "üí∞ *Gastos altos:* Tienes gastos considerables este mes. Considera revisar "
                "cada compra y preguntarte si realmente la necesitas."
            )
        elif analysis['total_gastos'] < 500000:  # Menos de 500 mil
            tips_personalizados.append(
                "üëç *Gastos controlados:* ¬°Excelente control de gastos! Mant√©n este h√°bito "
                "y considera ahorrar la diferencia."
            )
    
    return tips_personalizados


def handle_solicitar_tip(entities, from_number, original_message=""):
    """Selecciona y devuelve un tip financiero personalizado o general."""
    # Tips generales
    tips_generales = [
        "üí° *Regla 50-30-20:* 50% necesidades, 30% gustos, 20% ahorro. ¬°Es la base de las finanzas personales!",
        "ü§ñ *Automatizaci√≥n:* Pon tus ahorros en piloto autom√°tico. Transfiere una parte apenas recibas tu salario.",
        "‚è∞ *Regla 24h:* Antes de comprar algo por impulso, espera un d√≠a. Si al d√≠a siguiente lo sigues queriendo, h√°gale.",
        "üêú *Gastos hormiga:* Esos peque√±os gastos como el tinto diario suman mucho. ¬°Track√©alos!",
        "üì± *Apps de presupuesto:* Usa la tecnolog√≠a a tu favor para trackear gastos autom√°ticamente.",
        "üéØ *Metas espec√≠ficas:* 'Ahorrar para viajar a Europa' es mejor que 'ahorrar plata'.",
        "üí≥ *Tarjetas de cr√©dito:* √ösalas como d√©bito. Si no tienes la plata en efectivo, no la compres.",
        "üè† *Fondo de emergencia:* Ten 3-6 meses de gastos guardados para imprevistos.",
        "üìà *Inversi√≥n temprana:* El inter√©s compuesto es tu mejor amigo. ¬°Empieza a invertir joven!",
        "üõí *Lista de compras:* Nunca vayas al supermercado sin lista. Te ahorrar√°s compras innecesarias.",
        "üçΩÔ∏è *Cocina en casa:* Comer fuera es caro. Cocinar en casa es m√°s barato y saludable.",
        "üöó *Transporte inteligente:* Compara costos entre carro propio, Uber, transporte p√∫blico y bicicleta.",
        "üìö *Educaci√≥n financiera:* Lee libros, escucha podcasts, toma cursos. La educaci√≥n financiera es inversi√≥n.",
        "üé™ *Entretenimiento gratuito:* Hay muchas actividades divertidas que no cuestan dinero.",
        "üí™ *Habilidades:* Invierte en aprender habilidades que te generen ingresos adicionales."
    ]
    
    # Analizar datos del usuario
    try:
        analysis = analyze_user_financial_patterns(from_number)
        tips_personalizados = generate_personalized_tips(analysis, from_number)
        
        # Combinar tips personalizados con generales
        todos_los_tips = tips_personalizados + tips_generales
        
        # Seleccionar un tip al azar
        tip_seleccionado = random.choice(todos_los_tips)
        
        # Si hay tips personalizados, darle prioridad
        if tips_personalizados and random.random() < 0.6:  # 60% de probabilidad de tip personalizado
            tip_seleccionado = random.choice(tips_personalizados)
        
        return tip_seleccionado
        
    except Exception as e:
        print(f"Error generando tips personalizados: {e}")
        # Fallback a tips generales si hay error
        return random.choice(tips_generales)


def handle_consultar_balance(entities, from_number, original_message=""):
    """Calcula y muestra el balance entre ingresos y gastos del mes actual."""
    now = datetime.now()
    start_of_month = datetime(now.year, now.month, 1)
    
    # Calcular total de ingresos del mes
    ingresos_ref = DB.collection('ingresos')
    ingresos_query = (ingresos_ref
                     .where('usuario_whatsapp', '==', from_number)
                     .where('fecha_registro', '>=', start_of_month))
    
    total_ingresos = 0
    for ingreso in ingresos_query.stream():
        total_ingresos += ingreso.to_dict().get('monto', 0)
    
    # Calcular total de gastos del mes
    gastos_ref = DB.collection('gastos')
    gastos_query = (gastos_ref
                   .where('usuario_whatsapp', '==', from_number)
                   .where('fecha_registro', '>=', start_of_month))
    
    total_gastos = 0
    for gasto in gastos_query.stream():
        total_gastos += gasto.to_dict().get('monto', 0)
    
    balance = total_ingresos - total_gastos
    
    respuesta = f"üí∞ *Balance del mes - {now.strftime('%B %Y')}*\n\n"
    respuesta += f"üìà Ingresos: ${total_ingresos:,}\n"
    respuesta += f"üìâ Gastos: ${total_gastos:,}\n"
    respuesta += f"‚öñÔ∏è Balance: ${balance:,}"
    
    if balance > 0:
        respuesta += "\n\nüéâ ¬°Excelente! Est√°s en n√∫meros verdes este mes."
    elif balance < 0:
        respuesta += "\n\n‚ö†Ô∏è Cuidado, est√°s gastando m√°s de lo que ingresas."
    else:
        respuesta += "\n\n‚öñÔ∏è Est√°s en equilibrio perfecto."
    
    return respuesta


def handle_analisis_detallado(entities, from_number, original_message=""):
    """Proporciona un an√°lisis detallado de las finanzas del usuario con insights personalizados."""
    try:
        analysis = analyze_user_financial_patterns(from_number)
        
        if analysis['total_gastos'] == 0 and analysis['total_ingresos'] == 0:
            return "üìä *An√°lisis Financiero*\n\nA√∫n no tienes datos registrados para hacer un an√°lisis. ¬°Comienza registrando tus gastos e ingresos!"
        
        respuesta = "üìä *An√°lisis Financiero Detallado*\n\n"
        
        # Resumen b√°sico
        respuesta += f"üí∞ *Balance del mes:* ${analysis['balance']:,}\n"
        respuesta += f"üìà *Total ingresos:* ${analysis['total_ingresos']:,}\n"
        respuesta += f"üìâ *Total gastos:* ${analysis['total_gastos']:,}\n\n"
        
        # An√°lisis de categor√≠as
        if analysis['gastos_por_categoria']:
            respuesta += "üè∑Ô∏è *Gastos por categor√≠a:*\n"
            gastos_ordenados = sorted(analysis['gastos_por_categoria'].items(), key=lambda x: x[1], reverse=True)
            
            for categoria, monto in gastos_ordenados[:5]:  # Top 5 categor√≠as
                porcentaje = (monto / analysis['total_gastos'] * 100) if analysis['total_gastos'] > 0 else 0
                respuesta += f"‚Ä¢ {categoria}: ${monto:,} ({porcentaje:.1f}%)\n"
        
        # Insights personalizados
        respuesta += "\nüí° *Insights personalizados:*\n"
        
        # Insight sobre balance
        if analysis['balance'] < 0:
            deficit = abs(analysis['balance'])
            respuesta += f"‚ö†Ô∏è Est√°s gastando ${deficit:,} m√°s de lo que ingresas. Considera ajustar tu presupuesto.\n"
        elif analysis['balance'] > 0:
            respuesta += f"üéâ ¬°Excelente! Tienes ${analysis['balance']:,} de super√°vit. ¬°Sigue as√≠!\n"
        else:
            respuesta += "‚öñÔ∏è Est√°s en equilibrio perfecto entre ingresos y gastos.\n"
        
        # Insight sobre categor√≠a principal
        if analysis['categoria_mayor_gasto']:
            mayor_gasto = analysis['gastos_por_categoria'][analysis['categoria_mayor_gasto']]
            porcentaje = (mayor_gasto / analysis['total_gastos'] * 100) if analysis['total_gastos'] > 0 else 0
            respuesta += f"üéØ Tu mayor gasto es en {analysis['categoria_mayor_gasto']} ({porcentaje:.1f}% del total).\n"
        
        # Insight sobre diversificaci√≥n
        if analysis['num_categorias'] < 3:
            respuesta += "üìä Considera categorizar mejor tus gastos para un control m√°s detallado.\n"
        elif analysis['num_categorias'] > 8:
            respuesta += "üîç Tienes muchas categor√≠as. Considera agrupar algunas similares.\n"
        
        # Recomendaciones
        respuesta += "\nüéØ *Recomendaciones:*\n"
        if analysis['balance'] < 0:
            respuesta += "‚Ä¢ Revisa tus gastos en la categor√≠a m√°s alta\n"
            respuesta += "‚Ä¢ Considera reducir gastos no esenciales\n"
            respuesta += "‚Ä¢ Busca formas de aumentar tus ingresos\n"
        else:
            respuesta += "‚Ä¢ ¬°Excelente manejo financiero!\n"
            respuesta += "‚Ä¢ Considera invertir parte de tu super√°vit\n"
            respuesta += "‚Ä¢ Mant√©n un fondo de emergencia\n"
        
        return respuesta
        
    except Exception as e:
        print(f"Error en an√°lisis detallado: {e}")
        return "Lo siento, hubo un problema generando tu an√°lisis. Intenta de nuevo."


def handle_default(entities, from_number, original_message=""):
    """Maneja las respuestas por defecto cuando no se detecta una intenci√≥n espec√≠fica."""
    return ("¬°Hola! Soy tu asistente financiero personal. Puedo ayudarte con:\n\n"
            "üí∞ Registrar gastos\n"
            "üìà Registrar ingresos\n"
            "üìä Ver resumen de gastos\n"
            "‚öñÔ∏è Consultar balance\n"
            "üí° Consejos financieros\n"
            "üìÖ Crear recordatorios\n\n"
            "¬øEn qu√© te puedo ayudar hoy?")


# --- FUNCI√ìN PRINCIPAL Y ENRUTADOR ---

# Diccionario que mapea nombres de intenciones a funciones manejadoras
INTENT_HANDLERS = {
    'registrar_gasto': handle_registrar_gasto,
    'registrar_ingreso': handle_registrar_ingreso,
    'crear_recordatorio': handle_crear_recordatorio,
    'solicitar_resumen': handle_solicitar_resumen,
    'solicitar_tip': handle_solicitar_tip,
    'consultar_balance': handle_consultar_balance,
    'analisis_detallado': handle_analisis_detallado,
    'default': handle_default,
}

def phill_chatbot(request: Request):
    """Funci√≥n principal que se activa con cada mensaje de WhatsApp."""
    response = MessagingResponse()
    
    # Validar que tenemos los datos necesarios
    incoming_msg = request.values.get('Body', '').strip()
    from_number = request.values.get('From', '')

    # DEBUGGING: Imprimir toda la informaci√≥n de la request
    print("=== DEBUG TWILIO REQUEST ===")
    print(f"Request method: {request.method}")
    print(f"Request values: {dict(request.values)}")
    print(f"Request headers: {dict(request.headers)}")
    print(f"Body: '{incoming_msg}'")
    print(f"From: '{from_number}'")
    print("=============================")

    # Validaciones b√°sicas
    if not incoming_msg:
        response.message("Hola! Env√≠ame un mensaje para poder ayudarte con tus finanzas.")
        return response.to_xml()
    
    if not from_number:
        print("Error: No se pudo obtener el n√∫mero de tel√©fono del usuario")
        response.message("Lo siento, hubo un problema con tu n√∫mero de tel√©fono. Intenta de nuevo.")
        return response.to_xml()

    print(f"Mensaje recibido de {from_number}: '{incoming_msg}'")

    try:
        # Usar nuestro sistema de procesamiento local (SIN Dialogflow)
        print("=== PROCESAMIENTO LOCAL (SIN DIALOGFLOW) ===")
        
        # Detectar intenci√≥n usando nuestro procesador
        intent_name, confidence = intent_processor.detect_intent(incoming_msg)
        print(f"Intenci√≥n detectada: {intent_name} (confianza: {confidence:.2f})")
        
        # Extraer entidades
        entities = intent_processor.extract_entities(incoming_msg, intent_name)
        print(f"Entidades extra√≠das: {entities}")
        print("=============================================")
        
        # Si la confianza es muy baja, usar respuesta por defecto
        if confidence < 0.3:
            print(f"Confianza baja ({confidence:.2f}), usando respuesta por defecto")
            intent_name = 'default'
        
        # Usar el diccionario para encontrar la funci√≥n correcta a ejecutar
        handler = INTENT_HANDLERS.get(intent_name, handle_default)
        respuesta_bot = handler(entities, from_number, incoming_msg)
        
        # Validar que tenemos una respuesta v√°lida
        if not respuesta_bot or not respuesta_bot.strip():
            respuesta_bot = "Lo siento, no pude procesar tu solicitud. Intenta de nuevo."
        
        print(f"Respuesta final: {respuesta_bot}")
        response.message(respuesta_bot)

    except Exception as e:
        print(f"Error procesando mensaje: {e}")
        import traceback
        print(f"Traceback completo: {traceback.format_exc()}")
        # Mensaje de error m√°s amigable
        response.message("Lo siento, parcero. Tuve un problema procesando eso. Intenta de nuevo o contacta al soporte si el problema persiste.")

    return response.to_xml()
