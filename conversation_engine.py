"""
Motor de conversaci√≥n inteligente para Phill
Genera respuestas fluidas y contextuales sin necesidad de iteraci√≥n constante
"""

import json
import random
from typing import Dict, List, Optional, Tuple
from datetime import datetime

class ConversationEngine:
    def __init__(self):
        self.conversation_context = {}
        self.user_profile = {}
        self.conversation_history = []
        
        # Plantillas de conversaci√≥n por contexto
        self.conversation_templates = {
            "greeting": {
                "responses": [
                    "¬°Hola parcero! Soy Phill, tu asesor financiero personal. ¬øC√≥mo vamos con el dinero hoy? üí∞",
                    "¬°Esoooo! ¬øQu√© tal? Phill aqu√≠, listo para ayudarte con tus finanzas. ¬øEn qu√© te puedo colaborar? üöÄ",
                    "¬°Dale! Soy Phill, tu coach financiero. ¬øListo para hacer que el dinero trabaje para ti? üí™"
                ],
                "follow_up": "¬øQuieres que empecemos registrando tus gastos, viendo tu balance o necesitas consejos espec√≠ficos?"
            },
            "financial_struggle": {
                "responses": [
                    "¬°Dale parcero! No te preocupes, todos pasamos por eso. Las finanzas se pueden mejorar paso a paso. üöÄ",
                    "¬°Esoooo! Entiendo perfectamente. Te voy a ayudar a organizar todo de manera sencilla. üí™",
                    "¬°Tranquilo! Phill est√° aqu√≠ para ayudarte. Vamos a hacer un plan que funcione para ti. üéØ"
                ],
                "follow_up": "¬øPor d√≥nde empezamos? ¬øQuieres que veamos tus gastos actuales o prefieres que te d√© algunos consejos b√°sicos?"
            },
            "savings_goal": {
                "responses": [
                    "¬°Esoooo! Excelente decisi√≥n parcero. Ahorrar es la base de la libertad financiera. üéØ",
                    "¬°Dale! Me encanta que quieras empezar a ahorrar. Te voy a ayudar a crear un plan s√≥lido. üí∞",
                    "¬°Perfecto! Ahorrar es el primer paso hacia tus metas financieras. Vamos a hacerlo bien. üöÄ"
                ],
                "follow_up": "Para crear tu plan de ahorro necesito saber: ¬øcu√°l es tu objetivo? ¬øEmergencia, vacaciones, casa, o algo espec√≠fico?"
            },
            "budget_help": {
                "responses": [
                    "¬°Dale! Un presupuesto es tu mapa financiero. Te voy a ense√±ar a hacerlo f√°cil. üìä",
                    "¬°Esoooo! Presupuestar no es complicado, solo necesita m√©todo. Te ayudo paso a paso. üí™",
                    "¬°Perfecto! Un buen presupuesto te da control total sobre tu dinero. Vamos a crearlo. üéØ"
                ],
                "follow_up": "Primero necesito saber: ¬øcu√°nto ganas mensualmente y cu√°les son tus gastos fijos?"
            },
            "debt_concern": {
                "responses": [
                    "¬°Dale parcero! Las deudas se pueden manejar con un plan claro. Te ayudo a organizarlo. üéØ",
                    "¬°Esoooo! No te estreses, las deudas tienen soluci√≥n. Vamos a crear una estrategia. üí™",
                    "¬°Tranquilo! Phill est√° aqu√≠ para ayudarte a salir de las deudas de manera inteligente. üöÄ"
                ],
                "follow_up": "¬øMe puedes contar qu√© tipo de deudas tienes y aproximadamente cu√°nto debes?"
            },
            "investment_interest": {
                "responses": [
                    "¬°Esoooo! Invertir es el siguiente nivel despu√©s del ahorro. Te explico las opciones. üìà",
                    "¬°Dale! Me encanta que quieras hacer crecer tu dinero. Te ayudo a empezar seguro. üí∞",
                    "¬°Perfecto! Invertir es clave para la libertad financiera. Vamos a hacerlo con cabeza. üöÄ"
                ],
                "follow_up": "¬øYa tienes un fondo de emergencia? ¬øY cu√°l es tu perfil de riesgo: conservador, moderado o agresivo?"
            }
        }
        
        # Palabras clave para detectar contexto
        self.context_keywords = {
            "greeting": ["hola", "buenos", "buenas", "como", "estas", "que tal"],
            "financial_struggle": ["mal", "dif√≠cil", "problema", "no puedo", "estoy mal", "vamos mal", "no se me da"],
            "savings_goal": ["ahorro", "ahorrar", "guardar", "meta", "objetivo", "futuro"],
            "budget_help": ["presupuesto", "presupuestar", "organizar", "gastos", "dinero"],
            "debt_concern": ["deuda", "debo", "pr√©stamo", "tarjeta", "deber"],
            "investment_interest": ["invertir", "inversi√≥n", "crecer", "rendimiento", "ganar m√°s"]
        }
        
        # Personalidad de Phill
        self.phill_personality = {
            "tone": "amigable y colombiano",
            "expressions": ["parcero", "¬°Esoooo!", "¬°Dale!", "¬°Qu√© m√°s!", "¬°Dale parcero!"],
            "emojis": ["üí∞", "üöÄ", "üí™", "üéØ", "üìä", "üí∏", "üèÜ"],
            "advice_style": "pr√°ctico, directo y motivador"
        }

    def detect_conversation_context(self, message: str) -> str:
        """Detecta el contexto de la conversaci√≥n basado en el mensaje"""
        message_lower = message.lower()
        
        # Buscar palabras clave en orden de prioridad
        for context, keywords in self.context_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                return context
        
        # Si no encuentra contexto espec√≠fico, usar greeting
        return "greeting"

    def generate_contextual_response(self, message: str, user_context: Optional[Dict] = None) -> str:
        """Genera una respuesta contextual y fluida"""
        context = self.detect_conversation_context(message)
        
        # Obtener plantilla del contexto
        template = self.conversation_templates.get(context, self.conversation_templates["greeting"])
        
        # Seleccionar respuesta base
        base_response = random.choice(template["responses"])
        
        # Agregar seguimiento contextual
        follow_up = template["follow_up"]
        
        # Personalizar con informaci√≥n del usuario si est√° disponible
        if user_context:
            personalized_response = self._personalize_response(base_response, follow_up, user_context)
        else:
            personalized_response = f"{base_response} {follow_up}"
        
        # Agregar emoji aleatorio de Phill
        emoji = random.choice(self.phill_personality["emojis"])
        
        return f"{personalized_response} {emoji}"

    def _personalize_response(self, base_response: str, follow_up: str, user_context: Dict) -> str:
        """Personaliza la respuesta basada en el contexto del usuario"""
        # Si tiene gastos recientes, mencionarlos
        if user_context.get("gastos_recientes"):
            gastos = user_context["gastos_recientes"]
            if gastos > 0:
                follow_up = f"Veo que has tenido gastos recientes de ${gastos:,.0f}. {follow_up}"
        
        # Si tiene balance negativo, ofrecer ayuda espec√≠fica
        if user_context.get("balance") and user_context["balance"] < 0:
            follow_up = f"Noto que tu balance est√° en negativo. {follow_up}"
        
        return f"{base_response} {follow_up}"

    def generate_task_response(self, intent: str, entities: Dict) -> str:
        """Genera respuestas para tareas automatizadas"""
        task_responses = {
            "registrar_gasto": "‚úÖ **Gasto registrado**",
            "registrar_ingreso": "‚úÖ **Ingreso registrado**",
            "consultar_balance": "üí∞ **Tu balance actual**",
            "solicitar_resumen": "üìä **Resumen de tus finanzas**",
            "solicitar_tip": "üí° **Tip financiero del d√≠a**",
            "crear_recordatorio": "‚è∞ **Recordatorio creado**"
        }
        
        base_response = task_responses.get(intent, "‚úÖ **Procesado**")
        
        # Agregar detalles espec√≠ficos
        if intent == "registrar_gasto" and entities.get("categoria"):
            categoria = entities["categoria"]
            monto = entities.get("monto", "No especificado")
            return f"{base_response}: {monto} en {categoria}"
        
        return base_response

    def get_conversation_flow(self, message: str, user_context: Optional[Dict] = None) -> Dict:
        """Determina el flujo de la conversaci√≥n"""
        # Detectar si es tarea o charla
        is_task = self._is_task_message(message)
        
        if is_task:
            return {
                "tipo": "tarea",
                "respuesta": None,
                "intent": self._detect_task_intent(message)
            }
        else:
            return {
                "tipo": "charla",
                "respuesta": self.generate_contextual_response(message, user_context),
                "intent": None
            }

    def _is_task_message(self, message: str) -> bool:
        """Detecta si el mensaje es una tarea automatizada"""
        task_keywords = [
            "registrar", "gasto", "ingreso", "gast√©", "recib√≠", "compr√©",
            "balance", "cu√°nto tengo", "resumen", "gastos del mes",
            "recordatorio", "recu√©rdame", "tip", "consejo del d√≠a"
        ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in task_keywords)

    def _detect_task_intent(self, message: str) -> str:
        """Detecta el intent espec√≠fico de la tarea"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["gasto", "gast√©", "compr√©"]):
            return "registrar_gasto"
        elif any(word in message_lower for word in ["ingreso", "recib√≠", "salario"]):
            return "registrar_ingreso"
        elif any(word in message_lower for word in ["balance", "cu√°nto tengo"]):
            return "consultar_balance"
        elif any(word in message_lower for word in ["resumen", "gastos del mes"]):
            return "solicitar_resumen"
        elif any(word in message_lower for word in ["tip", "consejo del d√≠a"]):
            return "solicitar_tip"
        elif any(word in message_lower for word in ["recordatorio", "recu√©rdame"]):
            return "crear_recordatorio"
        else:
            return "registrar_gasto"  # Default

    def update_conversation_history(self, user_message: str, bot_response: str):
        """Actualiza el historial de conversaci√≥n"""
        self.conversation_history.append({
            "timestamp": datetime.now().isoformat(),
            "user": user_message,
            "bot": bot_response
        })
        
        # Mantener solo los √∫ltimos 10 mensajes
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]

    def get_conversation_summary(self) -> str:
        """Genera un resumen de la conversaci√≥n actual"""
        if not self.conversation_history:
            return "Conversaci√≥n nueva"
        
        topics = []
        for msg in self.conversation_history:
            context = self.detect_conversation_context(msg["user"])
            if context not in topics:
                topics.append(context)
        
        return f"Conversaci√≥n sobre: {', '.join(topics)}"

# Instancia global del motor de conversaci√≥n
conversation_engine = ConversationEngine()
